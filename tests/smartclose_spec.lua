describe("smartclose", function ()
    it("can be required", function ()
        require("smartclose")
    end)

    it("can close (", function ()
        local c = require("smartclose")._GetNextChar("(", 100)
        assert.are.same(c, ")")
    end)
    it("can close [", function ()
        local c = require("smartclose")._GetNextChar("[", 100)
        assert.are.same(c, "]")
    end)
    it("can close {", function ()
        local c = require("smartclose")._GetNextChar("{", 100)
        assert.are.same(c, "}")
    end)
    it("can close <", function ()
        local c = require("smartclose")._GetNextChar("<", 100)
        assert.are.same(c, ">")
    end)
    it("can close \"", function ()
        local c = require("smartclose")._GetNextChar("\"", 100)
        assert.are.same(c, "\"")
    end)
    it("can close \'", function ()
        local c = require("smartclose")._GetNextChar("\'", 100)
        assert.are.same(c, "\'")
    end)
    it("can close after multiple open", function ()
        local c = require("smartclose")._GetNextChar("([{<(", 100)
        assert.are.same(c, ")")
    end)
    it("can close after previous close", function ()
        local c = require("smartclose")._GetNextChar("(()", 100)
        assert.are.same(c, ")")
    end)
    it("can close after other char close", function ()
        local c = require("smartclose")._GetNextChar("({}", 100)
        assert.are.same(c, ")")
    end)
    it("can close \"", function ()
        local c = require("smartclose")._GetNextChar("(\"\"\"", 100)
        assert.are.same(c, "\"")
    end)
    it("can close \'", function ()
        local c = require("smartclose")._GetNextChar("(\'\'\'", 100)
        assert.are.same(c, "\'")
    end)
    it("can correctly ignore to close \"", function ()
        local c = require("smartclose")._GetNextChar("(\"\"\"", 100)
        assert.are.same(c, "\"")
    end)
    it("can handle if all is closed \"", function ()
        local c = require("smartclose")._GetNextChar("{[()]}()", 100)
        assert.are.same(c, nil)
    end)
end)
